name: Publish Docker Image

on:
  push:

env:
  REPOSITORY: ${{ secrets.DOCKER_HUB_ORGS }}/fluentd-kubernetes-daemonset
jobs:
  define-matrix:
    runs-on: ubuntu-latest
    env:
      ARRAY: '["debian-azureblob", "debian-cloudwatch"]'
    outputs:
      components: ${{ steps.set-components.outputs.components }}
    steps:
      - id: set-components
        run: |
          echo ${{ env.ARRAY }}
          echo ${{ fromJSON(env.ARRAY) }}
          echo ${{ contains(env.ARRAY, 'debian-azureblob') }}
          components=$(echo '[
            "debian-azureblob",
            "debian-cloudwatch",
            "debian-elasticsearch7",
            "debian-elasticsearch8",
            "debian-forward",
            "debian-gcs",
            "debian-graylog",
            "debian-kafka",
            "debian-kafka2",
            "debian-kinesis",
            "debian-logentries",
            "debian-loggly",
            "debian-logzio",
            "debian-opensearch",
            "debian-papertrail",
            "debian-s3",
            "debian-syslog"
            ]' | jq -c)
          echo "components=$components" >> "$GITHUB_OUTPUT"
  amd64:
    needs: define-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJSON(needs.define-matrix.outputs.components) }}
    steps:
      - uses: actions/checkout@v4
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      #   with:
      #     platforms: linux/amd64
      # - uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Setup tags
        run: |
          set -x
          component=${{ matrix.component }}
          echo "CONTEXT=docker-image/v1.16/${component}" >> ${GITHUB_ENV}
          for target in $(make echo-all-images); do
            case $target in
              *$component-amd64*)
                tags=$(echo $target | cut -d':' -f2-)
                tag1=$(echo $tags | cut -d',' -f1)
                tag2=$(echo $tags | cut -d',' -f2)
                echo "AMD64TAGS=${{ env.REPOSITORY }}:${tag1},${{ env.REPOSITORY }}:${tag2}" >> ${GITHUB_ENV}
                ;;
            esac
          done
      - name: Test
        run: |
          echo ${{ env.CONTEXT }}
          echo ${{ env.AMD64TAGS }}
      # - name: Build and push for amd64
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ${{ env.CONTEXT }}
      #     provenance: false
      #     push: true
      #     platforms: linux/amd64
      #     tags: ${{ env.AMD64TAGS }}
      #     # dare to use old mediatype (application/vnd.docker.distribution.manifest.v2+json)
      #     outputs: oci-mediatypes=false
  arm64:
    needs: define-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJSON(needs.define-matrix.outputs.components) }}
    steps:
      - uses: actions/checkout@v4
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      #   with:
      #     platforms: linux/arm64
      # - uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Setup tags
        run: |
          set -x
          component=${{ matrix.component }}
          echo "CONTEXT=docker-image/v1.16/arm64/${component}" >> ${GITHUB_ENV}
          for target in $(make echo-all-images); do
            case $target in
              *$component-arm64*)
                tags=$(echo $target | cut -d':' -f2-)
                tag1=$(echo $tags | cut -d',' -f1)
                tag2=$(echo $tags | cut -d',' -f2)
                echo "ARM64TAGS=${{ env.REPOSITORY }}:${tag1},${{ env.REPOSITORY }}:${tag2}" >> ${GITHUB_ENV}
                ;;
            esac
          done
      - name: Test
        run: |
          echo ${{ env.CONTEXT }}
          echo ${{ env.ARM64TAGS }}
      # - name: Build and push for arm64
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ${{ env.CONTEXT }}
      #     provenance: false
      #     push: true
      #     platforms: linux/arm64
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     tags: ${{ env.ARM64TAGS }}
      #     # dare to use old mediatype (application/vnd.docker.distribution.manifest.v2+json)
      #     outputs: oci-mediatypes=false
  manifest:
    needs: [define-matrix, amd64, arm64]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJSON(needs.define-matrix.outputs.components) }}
    steps:
      - uses: actions/checkout@v4
      # - uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Create manifest
        run: |
          component=${{ matrix.component }}
          for target in $(make echo-all-images); do
            case $target in
              *$component-amd64*)
                tags=$(echo $target | cut -d':' -f2-)
                tag1=$(echo $tags | cut -d',' -f1)
                tag2=$(echo $tags | cut -d',' -f2)
                MULTIARCH_AMD64_TAG=${tag1/amd64-/}
                MULTIARCH_AMD64_SHORT_TAG=${tag2/amd64-/}
                AMD64TAG=${tag1}
                SHORT_AMD64TAG=${tag2}
                ;;
              *$component-arm64*)
                tags=$(echo $target | cut -d':' -f2-)
                tag1=$(echo $tags | cut -d',' -f1)
                tag2=$(echo $tags | cut -d',' -f2)
                MULTIARCH_ARM64_TAG=${tag1/arm64-/}
                MULTIARCH_ARM64_SHORT_TAG=${tag2/arm64-/}
                ARM64TAG=${tag1}
                SHORT_ARM64TAG=${tag2}
                ;;
            esac
          done
          # v1.xx.x-debian-(component)-xxx
          if [ ${MULTIARCH_AMD64_TAG} != ${MULTIARCH_ARM64_TAG} ]; then
            echo "Multiarch tag (v1.xx.x-debian-(component)-xxx) must be same for amd64 and arm64: ${MULTIARCH_AMD64_TAG} !=  ${MULTIARCH_ARM64_TAG}"
          else
            echo $MULTIARCH_AMD64_TAG
            echo $AMD64TAG
            echo $ARM64TAG
            # docker buildx imagetools create -t ${{ env.REPOSITORY }}:${MULTIARCH_AMD64_TAG} \
            #   ${{ env.REPOSITORY }}:${AMD64TAG} \
            #   ${{ env.REPOSITORY }}:${ARM64TAG}
          fi
          # v1.xx-debian-(component)-xxx
          if [ ${MULTIARCH_AMD64_SHORT_TAG} != ${MULTIARCH_ARM64_SHORT_TAG} ]; then
            echo "Multiarch tag (v1.xx-debian-(component)-xxx) must be same for amd64 and arm64: ${MULTIARCH_AMD64_SHORT_TAG} !=  ${MULTIARCH_ARM64_SHORT_TAG}"
          else
            echo $MULTIARCH_AMD64_SHORT_TAG
            echo $SHORT_AMD64TAG
            echo $SHORT_ARM64TAG
            # docker buildx imagetools create -t ${{ env.REPOSITORY }}:${MULTIARCH_AMD64_SHORT_TAG} \
            #   ${{ env.REPOSITORY }}:${SHORT_AMD64TAG} \
            #   ${{ env.REPOSITORY }}:${SHORT_ARM64TAG}
          fi
