name: Publish Docker Image

on:
  push:
    branches:
      - main
      - v1.16
    tags:
      - v1.*

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ secrets.DOCKER_HUB_ORGS }}/fluentd-kubernetes-daemonset
    strategy:
      fail-fast: false
      matrix:
        context:
          - docker-image/v1.16/arm64/debian-azureblob
          - docker-image/v1.16/arm64/debian-cloudwatch
          - docker-image/v1.16/arm64/debian-elasticsearch7
          - docker-image/v1.16/arm64/debian-elasticsearch8
          - docker-image/v1.16/arm64/debian-forward
          - docker-image/v1.16/arm64/debian-gcs
          - docker-image/v1.16/arm64/debian-graylog
          - docker-image/v1.16/arm64/debian-kafka
          - docker-image/v1.16/arm64/debian-kafka2
          - docker-image/v1.16/arm64/debian-kinesis
          - docker-image/v1.16/arm64/debian-logentries
          - docker-image/v1.16/arm64/debian-loggly
          - docker-image/v1.16/arm64/debian-logzio
          - docker-image/v1.16/arm64/debian-opensearch
          - docker-image/v1.16/arm64/debian-papertrail
          - docker-image/v1.16/arm64/debian-s3
          - docker-image/v1.16/arm64/debian-syslog

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Setup tags
        run: |
          set -x
          context=${{ matrix.context }}
          component=${context##*/}
          for target in $(make echo-all-images); do \
            case $target in \
              *$component-amd64*) \
                tags=$(echo $target | cut -d':' -f2-); \
                tag1=$(echo $tags | cut -d',' -f1); \
                tag2=$(echo $tags | cut -d',' -f2); \
                echo "AMD64TAGS=${{ env.REPOSITORY }}:${tag1},${{ env.REPOSITORY }}:${tag2}" >> ${GITHUB_ENV}; \
                echo "MULTIARCH_TAG=${tag1/amd64-/}" >> ${GITHUB_ENV}; \
                echo "MULTIARCH_SHORT_TAG=${tag2/amd64-/}" >> ${GITHUB_ENV}; \
                echo "AMD64TAG=${tag1}" >> ${GITHUB_ENV}; \
                echo "SHORT_AMD64TAG=${tag2}" >> ${GITHUB_ENV}; \
                ;; \
              *$component-arm64*) \
                tags=$(echo $target | cut -d':' -f2-); \
                tag1=$(echo $tags | cut -d',' -f1); \
                tag2=$(echo $tags | cut -d',' -f2); \
                echo "ARM64TAGS=${{ env.REPOSITORY }}:${tag1},${{ env.REPOSITORY }}:${tag2}" >> ${GITHUB_ENV}; \
                echo "ARM64TAG=${tag1}" >> ${GITHUB_ENV}; \
                echo "SHORT_ARM64TAG=${tag2}" >> ${GITHUB_ENV}; \
                ;; \
            esac \
          done
          amdcontext=${context//arm64\//}
          echo "AMDCONTEXT=${amdcontext}" >> ${GITHUB_ENV}
      - name: Check buildx version
        run: docker buildx version
      - name: Build and push for amd64
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.AMDCONTEXT }}
          provenance: false
          push: true
          platforms: linux/amd64
          tags: ${{ env.AMD64TAGS }}
          # dare to use old mediatype (application/vnd.docker.distribution.manifest.v2+json)
          outputs: oci-mediatypes=false
      - name: Build and push for arm64
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          provenance: false
          push: true
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.ARM64TAGS }}
          # dare to use old mediatype (application/vnd.docker.distribution.manifest.v2+json)
          outputs: oci-mediatypes=false
      - name: Create manifest
        run: |
          # v1.xx.x-debian-(component)-xxx
          docker buildx imagetools create -t ${{ env.REPOSITORY }}:${{ env.MULTIARCH_TAG }} \
            ${{ env.REPOSITORY }}:${{ env.AMD64TAG }} \
            ${{ env.REPOSITORY }}:${{ env.ARM64TAG }}
          # v1.xx-debian-(component)-xxx
          docker buildx imagetools create -t ${{ env.REPOSITORY }}:${{ env.MULTIARCH_SHORT_TAG }} \
            ${{ env.REPOSITORY }}:${{ env.SHORT_AMD64TAG }} \
            ${{ env.REPOSITORY }}:${{ env.SHORT_ARM64TAG }}
      - name: Inspect manifest ${{ env.AMD64TAG }}
        run: docker manifest inspect ${{ env.REPOSITORY }}:${{ env.AMD64TAG }}
      - name: Inspect manifest ${{ env.ARM64TAG }}
        run: docker manifest inspect ${{ env.REPOSITORY }}:${{ env.ARM64TAG }}
      - name: Inspect manifest ${{ env.MULTIARCH_TAG }}
        run: docker manifest inspect ${{ env.REPOSITORY }}:${{ env.MULTIARCH_TAG }}
      - name: Inspect manifest ${{ env.MULTIARCH_SHORT_TAG }}
        run: docker manifest inspect ${{ env.REPOSITORY }}:${{ env.MULTIARCH_SHORT_TAG }}
      - name: Inspect ${{ env.AMD64TAG }} with buildx
        run: docker buildx imagetools inspect ${{ env.REPOSITORY }}:${{ env.AMD64TAG }}
      - name: Inspect ${{ env.ARM64TAG }} with buildx
        run: docker buildx imagetools inspect ${{ env.REPOSITORY }}:${{ env.ARM64TAG }}
      - name: Inspect ${{ env.MULTIARCH_TAG }} with buildx
        run: docker buildx imagetools inspect ${{ env.REPOSITORY }}:${{ env.MULTIARCH_TAG }}
      - name: Inspect ${{ env.MULTIARCH_SHORT_TAG }} with buildx
        run: docker buildx imagetools inspect ${{ env.REPOSITORY }}:${{ env.MULTIARCH_SHORT_TAG }}
